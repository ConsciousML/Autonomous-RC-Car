#! /usr/bin/python3

from layers import Background, DrawLines, Perspective, Crop, Symmetric
from layers.noises import Shadows, Filter, NoiseLines, Enhance, Shape
from simulator import Simulator
from utils.colors import White, DarkShadow, Yellow, Blue, Green, Red

import argparse


white = White()
yellow = Yellow()
shadow = DarkShadow()
blue = Blue()
green = Green()
red = Red()

def generate(n_examples, input_path, output_path, n_backgrounds=50):
    """Generate images from drawing fake lane lines on floor images

    Args:
        n_examples: A positive integer for the number of images to generate.
        input_path: A string for the path of the directory containing the floor images.
        output_path: A string for the path of the directory where to save the generated
            images.
        n_backgrounds: A positive integer for the number of backgrounds to use.
    """

    simulator = Simulator()

    simulator.add(Background(n_backgrounds=n_backgrounds,
                             n_rot=5,
                             n_crop=5,
                             n_res=5,
                             path=input_path,
                             input_size=(250, 200)))

    simulator.add(DrawLines(input_size=(250, 200),
                            color_range=white, 
                            middle_line=(20, 50, "dashed", yellow),
                            thickness_range=[5, 6, 7, 8, 9],
                            target_ratio=0,
                            obstacle_rate=0.4,
			                obstacle_color_ranges=[blue, green, red],
                            straight_line_rate=0))

    # add brightness
    simulator.add(Shape(brightness=0.1))

    # add perspective
    simulator.add(Perspective())

    # remove empty space generated by perspective
    simulator.add(Crop())

    # duplicate each image and mirror
    simulator.add(Symmetric())

    # blur + gauss_blur + smooth + smooth_more + rank_filter <= 1
    simulator.add(Filter(blur=0.1, smooth=0.1, smooth_more=0.1, rank_filter=0.1))

    # brightness + contrast + sharpness <= 1
    simulator.add(Enhance(brightness=0.8, contrast=0.1, sharpness=0.1))

    simulator.generate(n_examples=n_examples, path=output_path)


if __name__ == '__main__':

    """
    /!\Â Note that generator will generate 2 times the number of
        images asked for because of the symmetric layer so if you write 200 it
        will generate 400.
    """

    parser = argparse.ArgumentParser(description='Road generator')
    parser.add_argument('-i', help='directory containing all the input images', dest='input_path', type=str)
    parser.add_argument('-n', help='number of images to generate', dest='n_imgs', type=int, default=100)
    parser.add_argument('-p', help='output path', dest='output_path', type=str, default='output')
    parser.add_argument('--test', help='enable test mode', dest='test', action='store_true')
    parser.set_defaults(test=False)

    args = parser.parse_args()
    generate(args.n_imgs, input_path=args.input_path, output_path=args.output_path, n_backgrounds=1 if args.test else 50)

